# Generated by Django 5.2.6 on 2025-09-29 18:46

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('is_featured', models.BooleanField(default=False)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('total_entries', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='troubleshoots.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TroubleshootingEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=220, unique=True)),
                ('problem_description', models.TextField()),
                ('solution', models.TextField()),
                ('steps_to_reproduce', models.TextField(blank=True, help_text='Step-by-step instructions to reproduce the problem')),
                ('environment_details', models.TextField(blank=True, help_text='OS, software versions, hardware specs, etc.')),
                ('error_messages', models.TextField(blank=True, help_text='Exact error messages encountered')),
                ('prerequisites', models.TextField(blank=True, help_text='What needs to be done before applying this solution')),
                ('estimated_time', models.PositiveIntegerField(blank=True, help_text='Estimated time to resolve in minutes', null=True)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=10)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived'), ('PENDING_REVIEW', 'Pending Review')], default='PUBLISHED', max_length=15)),
                ('is_verified', models.BooleanField(default=False)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('verification_notes', models.TextField(blank=True)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('upvotes_count', models.PositiveIntegerField(default=0)),
                ('downvotes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_entries', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='troubleshoots.category')),
                ('tags', models.ManyToManyField(blank=True, related_name='entries', to='troubleshoots.tag')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EntryRevision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('problem_description', models.TextField()),
                ('solution', models.TextField()),
                ('change_summary', models.CharField(blank=True, max_length=200)),
                ('revision_number', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('revised_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='troubleshoots.troubleshootingentry')),
            ],
            options={
                'ordering': ['-revision_number'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_solution', models.BooleanField(default=False)),
                ('is_edited', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('path', models.CharField(max_length=255, unique=True)),
                ('level', models.PositiveIntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='troubleshoots.comment')),
                ('troubleshooting_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='troubleshoots.troubleshootingentry')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='troubleshooting_attachments/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'pdf', 'txt'])])),
                ('original_filename', models.CharField(max_length=255)),
                ('file_type', models.CharField(choices=[('IMAGE', 'Image'), ('DOCUMENT', 'Document'), ('VIDEO', 'Video'), ('AUDIO', 'Audio'), ('ARCHIVE', 'Archive'), ('OTHER', 'Other')], max_length=10)),
                ('file_size', models.PositiveIntegerField()),
                ('mime_type', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('troubleshooting_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='troubleshoots.troubleshootingentry')),
            ],
            options={
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('UP', 'Upvote'), ('DOWN', 'Downvote')], max_length=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('troubleshooting_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='troubleshoots.troubleshootingentry')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='troubleshootingentry',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='troubleshoo_search__c958bd_gin'),
        ),
        migrations.AddIndex(
            model_name='troubleshootingentry',
            index=models.Index(fields=['category', '-created_at'], name='troubleshoo_categor_20ae53_idx'),
        ),
        migrations.AddIndex(
            model_name='troubleshootingentry',
            index=models.Index(fields=['author', '-created_at'], name='troubleshoo_author__6adf7a_idx'),
        ),
        migrations.AddIndex(
            model_name='troubleshootingentry',
            index=models.Index(fields=['-upvotes_count'], name='troubleshoo_upvotes_39006d_idx'),
        ),
        migrations.AddIndex(
            model_name='troubleshootingentry',
            index=models.Index(fields=['-views_count'], name='troubleshoo_views_c_03e915_idx'),
        ),
        migrations.AddIndex(
            model_name='troubleshootingentry',
            index=models.Index(fields=['is_verified', 'status'], name='troubleshoo_is_veri_06696f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='entryrevision',
            unique_together={('entry', 'revision_number')},
        ),
        migrations.AddIndex(
            model_name='vote',
            index=models.Index(fields=['troubleshooting_entry', 'vote_type'], name='troubleshoo_trouble_c3dd5b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together={('troubleshooting_entry', 'user')},
        ),
    ]
